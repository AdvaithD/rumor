external_ip="$(curl -s v4.ident.me)"
p2p_port=9030

echo "External IP used in ENRs: $external_ip"
echo "External port used in ENRs: $p2p_port"

fork_digest="0xe7a75d5a"

enr make \
  --ip="$external_ip" \
  --tcp=$p2p_port \
  --udp=$p2p_port \
  --static-ip="$external_ip" \
  --fallback-udp=$p2p_port \
  --attnets="0xffffffffffffffff" \
  --fork-digest="$fork_digest" \
  --next-fork-version="0x00000001" \
  --next-fork-epoch="0xffffffffffffffff"


# create a shared peerstore, we can hook more actors to it later.
peerstore create crawler

# Try and get 400 peers connected, because why not, we're a crawler.
# And tag, see how many users identify us
host start --lo-peers=400 --hi-peers=500 --peer-grace-period=30s --agent="protolambda-heya"
host listen --tcp=$p2p_port --ip=0.0.0.0

# Set up a fake Medalla status

# We zero out attnets here, even though we advertise it in the ENR. We can't really support the attnets without gossip.
peer metadata set \
      --attnets="0x0000000000000000" \
      --seq-number=0

# change status, as if we are at the start of the Medalla chain
peer status set \
      --finalized-epoch=0 \
      --finalized-root="0000000000000000000000000000000000000000000000000000000000000000" \
      --fork-digest="$fork_digest" \
      --head-root="0xebe49843e96e538592c9e1976e155e9057c251ed9312eba517afce3ca1a0660c" \
      --head-slot=0


# Set up malicious endpoints, never actually sync
rpc blocks-by-range listen --drop --compression=snappy
rpc blocks-by-root listen --drop --compression=snappy
rpc goodbye listen --drop --compression=snappy

rpc blocks-by-range listen --drop --compression=none
rpc blocks-by-root listen --drop --compression=none
rpc goodbye listen --drop --compression=none

peer status serve
peer metadata serve

# Start polling status of everyone
# Exchange status with everyone every slot
peer status poll --interval=12s  --timeout=3s --compression=snappy
peer status poll --interval=12s  --timeout=3s --compression=none

# Ping everyone, and update metadata if they have new data for us
peer metadata poll --interval=30s  --timeout=10s  --update=true --update-timeout=20s --compression=snappy
peer metadata poll --interval=30s  --timeout=10s  --update=true --update-timeout=20s --compression=none

# Serve pong requests, also update if we get a higher ping than known
peer metadata pong --update=true --compression=snappy
peer metadata pong --update=true --compression=none

## TODO: specify bootnode ENR
## Start discv5, and keep querying random nodes
#_dv5_runner dv5 run --ip="$listening_ip" --udp=$p2p_port
## Add whatever we see to the peerstore, if it has the right fork digest.
#dv5 random --add --filter-digest="$fork_digest"

